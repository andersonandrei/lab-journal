# -- mode: org --
# -- coding: utf-8 --
#+STARTUP: overview indent inlineimages logdrawer
#+TITLE:  Andrei's Journal
#+AUTHOR:      Andrei
#+LANGUAGE:    en
#+TAGS: noexport(n) Stats(S)
#+TAGS: Teaching(T) R(R) OrgMode(O) Python(P)
#+TAGS: Book(b) DOE(D) Code(C) NODAL(N) FPGA(F) Autotuning(A) Arnaud(r)
#+TAGS: DataVis(v) PaperReview(W)
#+EXPORT_SELECT_TAGS: Blog
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+COLUMNS: %25ITEM %TODO %3PRIORITY %TAGS
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w@) APPT(a!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

* quarta, 06-02-2019

** 18:02 Meeting, org-journal                                      :OrgMode:

*** Starting on org-journal
**** Trying o do something in the org-jornal1. 
***** Creating a list
     1. Hello
     2. Hi
     3. Salut
	1. Ça vá?
     4. Learning how to do some lists
     5. Creating a lot of topics

*** Todays meeting:
**** Specified each part in the project.
**** Actually, we have two main layers to keep attention: scheduler and allocation.
**** My work will be on the allocation: *DO THE FIRST VERSION OF THE SCHEDULER*:
***** For this, I will use some data from:
****** The INPUT (jobs)
******* Priority
******* Client
******* etc
****** The QBoxes (status from each QBOX):
******* Local data
******* Status(how full it is)

*** TODO LIST
**** DONE Learn BatSim
:LOGBOOK:  
- State "DONE"       from "TODO"       [2019-02-07 qui 14:29]
- State "TODO"       from "WAITING"    [2019-02-07 qui 14:29]
- State "WAITING"    from "TODO"       [2019-02-07 qui 14:28] \\
  Waiting ...
:END:      
***** WAITING Red about it
:LOGBOOK:  
- State "WAITING"    from "TODO"       [2019-02-07 qui 14:36] \\
  read
:END:      
***** TODO Configure
***** TODO Install
***** TODO First examples
**** TODO Read two papers
***** TODO How future buildings...
***** TODO Heating as a cloud...

* quinta, 07-02-2019...

** Journal

*** Some tips with Pedro

**** Headers

**** Tags

**** etc

** Research

*** BATSIM

**** DONE First examples on BATSIM website
:LOGBOOK:  
- State "DONE"       from ""           [2019-02-08 sex 18:00]
- State "WAITING"    from "TODO"       [2019-02-07 qui 17:52] \\
  The installation is not working
:END:      

**** WAITING First example on GitLab Prototype repo
DEADLINE: <2019-02-08 sex>
:LOGBOOK:  
- State "WAITING"    from "TODO"       [2019-02-07 qui 17:52] \\
  The installation of BATSIM is not working
:
* sexta, 08-02-2019
** Batsim
*** I installed it and performed the first example that includes: exectution and statistics.
*** If I understood well the structure. It is:
1. Batsim -> Simulates everything.
2. A scheduler -> Takes the decisions.

**** To see everything running, we can use 2 windows, one for each thing.
*NOTE:* Here, everything was setted to be in the /tmp.

#+NAME: batsim-side
#+BEGIN_SRC <bash> 
  batsim -p /tmp/batsim-v3.0.0/platforms/cluster512.xml        
         -w /tmp/batsim-v3.0.0/workloads/test_batsim_paper_workload_seed1.json
         -e "/tmp/expe-out/out"
#+END_SRC
It will keep the batsim oppened, waiting for the scheduler.

#+NAME: scheduler-side
#+BEGIN_SRC <bash>
  robin generate ./expe.yaml       
                    --output-dir=/tmp/expe-out       
                    --batcmd="batsim -p /tmp/batsim-v3.0.0/platforms/cluster512.xml 
                 -w /tmp/batsim-v3.0.0/workloads/test_batsim_paper_workload_seed1.json 
                 -e /tmp/expe-out/out"       
                    --schedcmd='batsched -v easy_bf'
#+END_SRC 
 It will use robin to run the scheduler batsched with the mode easy_bf.
** pybatsim
*** Runs a schedular for the batsim.
*** Configuration
**** To install by: pip install pybatsim
**** To clone [[https://gitlab.inria.fr/batsim/pybatsim][PyBatsim-repository]] to have access to the schedulers implemented there.
*** To run its scheduler:
**** To run the batsim as the same way.
**** To run the schedulers, acess the repository and try:
***** pybatsim schedulers/scheduler.py
**** I tried:
***** pybatsim schedulers/fillerSched.py
***** pybatsim schedulers/schedFcfs.py
** statistics
*** The batsim mainpage offer a example of statistic analysis:
 #+NAME: batsim-analysis
 #+BEGIN_SRC <bash>
 #!/usr/bin/env Rscript
  library('tidyverse') # Use the tidyverse library.
  theme_set(theme_bw()) # Cosmetics.

  jobs = read_csv('out_jobs.csv') # Read the jobs file.

  # Manually compute some metrics on each job.
  jobs = jobs %>% mutate(slowdown = (finish_time - starting_time) /
                                  (finish_time - submission_time),
                       longer_than_one_minute = execution_time > 60)

  # Manually compute aggregated metrics.
  # Here, the mean waiting time/slowdown for jobs with small execution time.
  metrics = jobs %>% filter(longer_than_one_minute == FALSE) %>%
    summarize(mean_waiting_time = mean(waiting_time),
              mean_slowdown = mean(slowdown))

  print(metrics) # Print aggregated metrics.

  # Visualize what you want...
  # Is there a link between jobs' waiting time and size?
  ggplot(jobs) +
    geom_point(aes(y=waiting_time, x=requested_number_of_resources)) +
    ggsave('plot_wt_size.pdf')

  # Is this still true depending on job execution time?
  ggplot(jobs) +
    geom_point(aes(y=waiting_time, x=requested_number_of_resources)) +
    facet_wrap(~longer_than_one_minute) +
    ggsave('plot_wt_size_exectime.pdf')

  # Is there a link with job size and execution time?
  ggplot(jobs) +
    geom_violin(aes(factor(requested_number_of_resources), execution_time)) +
    ggsave('plot_exectime_size.pdf')

 #+END_SRC
*** Running this analysis on both pybatsimexamples we can check the different results.

